//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @PlayerControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""Playermoverment"",
            ""id"": ""28d1fe53-9680-47be-9037-8884a75fd7f5"",
            ""actions"": [
                {
                    ""name"": ""moverment"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f3509384-5e29-4ec7-99e5-c14dbc3fe636"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spirit"",
                    ""type"": ""Button"",
                    ""id"": ""462cc79c-5f0e-4cd8-85bf-a796bcdb6af1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""da886ba2-27d9-4571-baf9-e04945413497"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""4c92e77a-beb4-4965-9650-8dc4d3adb66a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""22e04d23-0b2c-4de0-872d-aa8a92ffee60"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moverment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a8ee6888-df8e-473c-918e-611f4f390c81"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moverment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4c52fdd8-64ed-440e-8eea-fc36f6f0ce58"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moverment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f0c6dfc8-98dc-4cc9-bb8f-f99c32f8a40e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moverment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0eba834b-6356-4659-b5e0-a2c2e1e1ce76"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moverment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""38345a21-07bc-4faa-9ecd-8122f7e2f1f3"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Tap,Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spirit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85fd1bc3-52c3-489b-832d-23bec08f015e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47f722fc-e563-4b86-9d6d-7f105ed8d059"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Combat"",
            ""id"": ""25cfb192-6228-4802-af49-7a6061c03268"",
            ""actions"": [
                {
                    ""name"": ""block"",
                    ""type"": ""Button"",
                    ""id"": ""b873c930-4a5a-481f-b147-859bf9f8a924"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NormalAttack"",
                    ""type"": ""Button"",
                    ""id"": ""028d213f-a65f-4e09-8976-8e4e70b032ef"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a949325f-afaa-4a60-8b3e-f4f06122ef9d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""860d16a9-2392-4e5e-adfe-898f6efe42f7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap,Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NormalAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Other"",
            ""id"": ""2ea348e9-205b-412f-aafc-d905bdb6f212"",
            ""actions"": [
                {
                    ""name"": ""Cursor"",
                    ""type"": ""Button"",
                    ""id"": ""a1e67fb0-864c-408a-b3ad-c653923edcbc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b3ca9c77-fb8d-46f7-b205-b2045228c732"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Playermoverment
        m_Playermoverment = asset.FindActionMap("Playermoverment", throwIfNotFound: true);
        m_Playermoverment_moverment = m_Playermoverment.FindAction("moverment", throwIfNotFound: true);
        m_Playermoverment_Spirit = m_Playermoverment.FindAction("Spirit", throwIfNotFound: true);
        m_Playermoverment_Jump = m_Playermoverment.FindAction("Jump", throwIfNotFound: true);
        m_Playermoverment_Crouch = m_Playermoverment.FindAction("Crouch", throwIfNotFound: true);
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_block = m_Combat.FindAction("block", throwIfNotFound: true);
        m_Combat_NormalAttack = m_Combat.FindAction("NormalAttack", throwIfNotFound: true);
        // Other
        m_Other = asset.FindActionMap("Other", throwIfNotFound: true);
        m_Other_Cursor = m_Other.FindAction("Cursor", throwIfNotFound: true);
    }

    ~@PlayerControl()
    {
        Debug.Assert(!m_Playermoverment.enabled, "This will cause a leak and performance issues, PlayerControl.Playermoverment.Disable() has not been called.");
        Debug.Assert(!m_Combat.enabled, "This will cause a leak and performance issues, PlayerControl.Combat.Disable() has not been called.");
        Debug.Assert(!m_Other.enabled, "This will cause a leak and performance issues, PlayerControl.Other.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Playermoverment
    private readonly InputActionMap m_Playermoverment;
    private List<IPlayermovermentActions> m_PlayermovermentActionsCallbackInterfaces = new List<IPlayermovermentActions>();
    private readonly InputAction m_Playermoverment_moverment;
    private readonly InputAction m_Playermoverment_Spirit;
    private readonly InputAction m_Playermoverment_Jump;
    private readonly InputAction m_Playermoverment_Crouch;
    public struct PlayermovermentActions
    {
        private @PlayerControl m_Wrapper;
        public PlayermovermentActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @moverment => m_Wrapper.m_Playermoverment_moverment;
        public InputAction @Spirit => m_Wrapper.m_Playermoverment_Spirit;
        public InputAction @Jump => m_Wrapper.m_Playermoverment_Jump;
        public InputAction @Crouch => m_Wrapper.m_Playermoverment_Crouch;
        public InputActionMap Get() { return m_Wrapper.m_Playermoverment; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayermovermentActions set) { return set.Get(); }
        public void AddCallbacks(IPlayermovermentActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayermovermentActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayermovermentActionsCallbackInterfaces.Add(instance);
            @moverment.started += instance.OnMoverment;
            @moverment.performed += instance.OnMoverment;
            @moverment.canceled += instance.OnMoverment;
            @Spirit.started += instance.OnSpirit;
            @Spirit.performed += instance.OnSpirit;
            @Spirit.canceled += instance.OnSpirit;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
        }

        private void UnregisterCallbacks(IPlayermovermentActions instance)
        {
            @moverment.started -= instance.OnMoverment;
            @moverment.performed -= instance.OnMoverment;
            @moverment.canceled -= instance.OnMoverment;
            @Spirit.started -= instance.OnSpirit;
            @Spirit.performed -= instance.OnSpirit;
            @Spirit.canceled -= instance.OnSpirit;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
        }

        public void RemoveCallbacks(IPlayermovermentActions instance)
        {
            if (m_Wrapper.m_PlayermovermentActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayermovermentActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayermovermentActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayermovermentActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayermovermentActions @Playermoverment => new PlayermovermentActions(this);

    // Combat
    private readonly InputActionMap m_Combat;
    private List<ICombatActions> m_CombatActionsCallbackInterfaces = new List<ICombatActions>();
    private readonly InputAction m_Combat_block;
    private readonly InputAction m_Combat_NormalAttack;
    public struct CombatActions
    {
        private @PlayerControl m_Wrapper;
        public CombatActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @block => m_Wrapper.m_Combat_block;
        public InputAction @NormalAttack => m_Wrapper.m_Combat_NormalAttack;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void AddCallbacks(ICombatActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatActionsCallbackInterfaces.Add(instance);
            @block.started += instance.OnBlock;
            @block.performed += instance.OnBlock;
            @block.canceled += instance.OnBlock;
            @NormalAttack.started += instance.OnNormalAttack;
            @NormalAttack.performed += instance.OnNormalAttack;
            @NormalAttack.canceled += instance.OnNormalAttack;
        }

        private void UnregisterCallbacks(ICombatActions instance)
        {
            @block.started -= instance.OnBlock;
            @block.performed -= instance.OnBlock;
            @block.canceled -= instance.OnBlock;
            @NormalAttack.started -= instance.OnNormalAttack;
            @NormalAttack.performed -= instance.OnNormalAttack;
            @NormalAttack.canceled -= instance.OnNormalAttack;
        }

        public void RemoveCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombatActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatActions @Combat => new CombatActions(this);

    // Other
    private readonly InputActionMap m_Other;
    private List<IOtherActions> m_OtherActionsCallbackInterfaces = new List<IOtherActions>();
    private readonly InputAction m_Other_Cursor;
    public struct OtherActions
    {
        private @PlayerControl m_Wrapper;
        public OtherActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Cursor => m_Wrapper.m_Other_Cursor;
        public InputActionMap Get() { return m_Wrapper.m_Other; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OtherActions set) { return set.Get(); }
        public void AddCallbacks(IOtherActions instance)
        {
            if (instance == null || m_Wrapper.m_OtherActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OtherActionsCallbackInterfaces.Add(instance);
            @Cursor.started += instance.OnCursor;
            @Cursor.performed += instance.OnCursor;
            @Cursor.canceled += instance.OnCursor;
        }

        private void UnregisterCallbacks(IOtherActions instance)
        {
            @Cursor.started -= instance.OnCursor;
            @Cursor.performed -= instance.OnCursor;
            @Cursor.canceled -= instance.OnCursor;
        }

        public void RemoveCallbacks(IOtherActions instance)
        {
            if (m_Wrapper.m_OtherActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOtherActions instance)
        {
            foreach (var item in m_Wrapper.m_OtherActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OtherActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OtherActions @Other => new OtherActions(this);
    public interface IPlayermovermentActions
    {
        void OnMoverment(InputAction.CallbackContext context);
        void OnSpirit(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
    }
    public interface ICombatActions
    {
        void OnBlock(InputAction.CallbackContext context);
        void OnNormalAttack(InputAction.CallbackContext context);
    }
    public interface IOtherActions
    {
        void OnCursor(InputAction.CallbackContext context);
    }
}
